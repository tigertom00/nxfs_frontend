{
  "name": "EFObasen Scraper - Puppeteer Community Node",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "efobasen-puppeteer-lookup",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "1",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.el_number }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2",
      "name": "Validate EL Number",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "=https://efobasen.no/søk?q={{ $json.el_number }}",
        "waitUntil": "networkidle2",
        "timeout": 30000,
        "viewport": {
          "width": 1280,
          "height": 720
        },
        "options": {
          "args": [
            "--no-sandbox",
            "--disable-setuid-sandbox",
            "--disable-dev-shm-usage",
            "--disable-accelerated-2d-canvas",
            "--no-first-run",
            "--no-zygote",
            "--disable-gpu",
            "--single-process"
          ]
        }
      },
      "id": "3",
      "name": "Navigate to EFObasen",
      "type": "n8n-nodes-puppeteer.puppeteer",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "jsCode": "// Extract product data from EFObasen page\nconst html = $input.first().json.html || $input.first().json.content || '';\nconst elNumber = $input.first().json.el_number;\n\n// Function to extract text using regex patterns\nfunction extractWithPatterns(html, patterns) {\n  for (const pattern of patterns) {\n    const match = html.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  return null;\n}\n\n// Try to extract product information\nconst title = extractWithPatterns(html, [\n  /<h1[^>]*>([^<]+)<\\/h1>/i,\n  /<h2[^>]*>([^<]+)<\\/h2>/i,\n  /class=[\"']title[\"'][^>]*>([^<]+)</i,\n  /class=[\"']product-name[\"'][^>]*>([^<]+)</i\n]);\n\nconst manufacturer = extractWithPatterns(html, [\n  /(?:produsent|manufacturer)[^>]*>([^<]+)</i,\n  /(?:leverandør|supplier)[^>]*>([^<]+)</i,\n  /class=[\"']manufacturer[\"'][^>]*>([^<]+)</i\n]);\n\nconst description = extractWithPatterns(html, [\n  /(?:beskrivelse|description)[^>]*>([^<]+)</i,\n  /class=[\"']description[\"'][^>]*>([^<]+)</i,\n  /class=[\"']product-description[\"'][^>]*>([^<]+)</i\n]);\n\nconst price = extractWithPatterns(html, [\n  /(?:pris|price)[^>]*>([\\d,\\.]+)/i,\n  /kr[\\s]*([\\d,\\.]+)/i,\n  /([\\d,\\.]+)[\\s]*kr/i\n]);\n\nconst availability = extractWithPatterns(html, [\n  /(?:tilgjengelighet|availability)[^>]*>([^<]+)</i,\n  /(?:på lager|in stock)/i,\n  /(?:bestillingsvare|order item)/i\n]);\n\n// Check if we found any meaningful data\nconst hasProductData = title || manufacturer || description;\n\nif (hasProductData) {\n  // Found some product data\n  return [{\n    json: {\n      el_nr: parseInt(elNumber),\n      title: title || 'Unknown Product',\n      manufacturer: manufacturer || 'Unknown',\n      supplier: manufacturer || 'Unknown',\n      description: description || '',\n      price: price ? parseFloat(price.replace(/[^\\d.,]/g, '').replace(',', '.')) : null,\n      availability: availability || 'Unknown',\n      category: 'Electrical Component',\n      scraped_at: new Date().toISOString(),\n      source: 'efobasen_puppeteer',\n      success: true,\n      html_length: html.length\n    }\n  }];\n} else {\n  // No product data found, might be a search results page or error\n  const hasSearchResults = html.toLowerCase().includes('søk') || \n                          html.toLowerCase().includes('resultat') ||\n                          html.toLowerCase().includes('ingen');\n  \n  return [{\n    json: {\n      error: 'No product data found',\n      el_number: elNumber,\n      has_search_interface: hasSearchResults,\n      html_snippet: html.substring(0, 500),\n      html_length: html.length,\n      scraped_at: new Date().toISOString(),\n      source: 'efobasen_puppeteer_failed',\n      success: false\n    }\n  }];\n}"
      },
      "id": "4",
      "name": "Extract Product Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal",
                "rightType": "boolean"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced mock data fallback with Norwegian electrical products\nconst mockProducts = [\n  {\n    el_nr: 123456,\n    title: \"LED-pære E27 9W 2700K dimbar\",\n    manufacturer: \"Philips\",\n    supplier: \"Elektro Grossist AS\",\n    description: \"LED-pære med E27 sokkel, 9W effekt, varmhvitt lys 2700K, dimbar\",\n    category: \"Belysning - LED pærer\",\n    price: 89.90,\n    availability: \"På lager\"\n  },\n  {\n    el_nr: 234567,\n    title: \"Jordfeilbryter 2-pol 16A 30mA Type A\",\n    manufacturer: \"Schneider Electric\",\n    supplier: \"El-Grossisten\",\n    description: \"Jordfeilbryter 2-polet 16A 30mA Type A for boliger\",\n    category: \"Sikkerhetsutstyr - Jordfeilbrytere\",\n    price: 245.00,\n    availability: \"På lager\"\n  },\n  {\n    el_nr: 345678,\n    title: \"Kabel NYM-J 3x1.5mm² 100m\",\n    manufacturer: \"Nexans\",\n    supplier: \"Kabel Norge AS\",\n    description: \"Installasjonskabel NYM-J 3x1.5mm² på 100m trommel, grå\",\n    category: \"Kabler - Installasjon\",\n    price: 1250.00,\n    availability: \"Bestillingsvare\"\n  },\n  {\n    el_nr: 456789,\n    title: \"Stikkontakt 1-fas med jord hvit\",\n    manufacturer: \"Gira\",\n    supplier: \"Elektro Partner\",\n    description: \"Stikkontakt 1-fas med jord, hvit, for standard veggboks\",\n    category: \"Stikkontakter - Standard\",\n    price: 45.00,\n    availability: \"På lager\"\n  },\n  {\n    el_nr: 567890,\n    title: \"Lysbryter 1-pol hvit\",\n    manufacturer: \"ABB\",\n    supplier: \"ABB Norge\",\n    description: \"Lysbryter 1-polet, hvit, for standard veggboks\",\n    category: \"Brytere - Standard\",\n    price: 35.00,\n    availability: \"På lager\"\n  },\n  {\n    el_nr: 678901,\n    title: \"Automatsikring C16 1-pol\",\n    manufacturer: \"Schneider Electric\",\n    supplier: \"El-Grossisten\",\n    description: \"Automatsikring C16 1-polet for fordelertavle\",\n    category: \"Sikringer - Automat\",\n    price: 85.00,\n    availability: \"På lager\"\n  }\n];\n\nconst elNumber = parseInt($input.first().json.el_number);\nconst product = mockProducts.find(p => p.el_nr === elNumber);\n\nif (product) {\n  return [{\n    json: {\n      ...product,\n      scraped_at: new Date().toISOString(),\n      source: 'mock_fallback',\n      note: 'Puppeteer scraping failed, using mock data'\n    }\n  }];\n} else {\n  return [{\n    json: {\n      error: 'Product not found in mock data either',\n      el_number: elNumber,\n      available_demo_numbers: mockProducts.map(p => p.el_nr),\n      note: 'Try demo EL-numbers: 123456, 234567, 345678, 456789, 567890, 678901',\n      scraped_at: new Date().toISOString(),\n      source: 'mock_fallback_failed'\n    }\n  }];\n}"
      },
      "id": "6",
      "name": "Fallback to Mock Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "respondWith": "json",\n        "responseBody": "={{ $json }}"\n      },\n      "id": "7",\n      "name": "Return Success",\n      "type": "n8n-nodes-base.respondToWebhook",\n      "typeVersion": 1,\n      "position": [1340, 100]\n    },\n    {\n      "parameters": {\n        "respondWith": "json",\n        "responseBody": "={{ $json }}"\n      },\n      "id": "8",\n      "name": "Return Fallback",\n      "type": "n8n-nodes-base.respondToWebhook",\n      "typeVersion": 1,\n      "position": [1560, 400]\n    },\n    {\n      "parameters": {\n        "respondWith": "json",\n        "responseBody": "{{ { \"error\": \"Invalid EL number\", \"message\": \"Please provide a valid el_number parameter\", \"example\": { \"el_number\": 123456 } } }}"\n      },\n      "id": "9",\n      "name": "Return Invalid Request",\n      "type": "n8n-nodes-base.respondToWebhook",\n      "typeVersion": 1,\n      "position": [680, 500]\n    }\n  ],\n  "connections": {\n    "Webhook Trigger": {\n      "main": [\n        [\n          {\n            "node": "Validate EL Number",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Validate EL Number": {\n      "main": [\n        [\n          {\n            "node": "Navigate to EFObasen",\n            "type": "main",\n            "index": 0\n          }\n        ],\n        [\n          {\n            "node": "Return Invalid Request",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Navigate to EFObasen": {\n      "main": [\n        [\n          {\n            "node": "Extract Product Data",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Extract Product Data": {\n      "main": [\n        [\n          {\n            "node": "Check Success",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Check Success": {\n      "main": [\n        [\n          {\n            "node": "Return Success",\n            "type": "main",\n            "index": 0\n          }\n        ],\n        [\n          {\n            "node": "Fallback to Mock Data",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Fallback to Mock Data": {\n      "main": [\n        [\n          {\n            "node": "Return Fallback",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    }\n  },\n  "pinData": {},\n  "settings": {\n    "executionOrder": "v1"\n  },\n  "staticData": null,\n  "tags": [\n    {\n      "createdAt": "2024-01-01T00:00:00.000Z",\n      "updatedAt": "2024-01-01T00:00:00.000Z",\n      "id": "1",\n      "name": "puppeteer"\n    },\n    {\n      "createdAt": "2024-01-01T00:00:00.000Z",\n      "updatedAt": "2024-01-01T00:00:00.000Z",\n      "id": "2",\n      "name": "scraping"\n    }\n  ],\n  "triggerCount": 0,\n  "updatedAt": "2024-01-01T00:00:00.000Z",\n  "versionId": "3"\n}